# (generated with --quick)

import collections
from typing import Any, Callable, Type, TypeVar

BlockContext: Any
FileContext: Any
ModuleMember: Any
ParseNodeContext: Any
PrettyTable: Any
_block_context: list
_class_defs: collections.defaultdict[nothing, list]
_filename_context: list
_function_defs: collections.defaultdict[nothing, list]
_functions: collections.defaultdict[nothing, Any]
_missing_symbols: collections.defaultdict
_module_members: collections.defaultdict[nothing, Any]
_modules_to_aliases: collections.defaultdict[nothing, Any]
_parse_node_context: list
_referenced_symbols: collections.defaultdict
_variable_assignments: collections.defaultdict[nothing, Any]
attr: Any
defaultdict: Type[collections.defaultdict]
os: module

_S = TypeVar('_S')
_T = TypeVar('_T')
_T2 = TypeVar('_T2')
_T3 = TypeVar('_T3')
_T4 = TypeVar('_T4')
_T5 = TypeVar('_T5')

def add_from_import(module, member, alias) -> None: ...
def add_function_node(function_node) -> None: ...
def add_missing_symbol(filename, name, context) -> None: ...
def add_module_import(module, alias) -> None: ...
def add_referenced_symbol(filename, name) -> None: ...
def add_variable_assignment(variable_name, code) -> None: ...
def get_current_context_dir() -> Any: ...
def get_current_parse_node() -> Any: ...
def get_missing_symbols_in_file(filename, include_context = ...) -> Any: ...
@overload
def partial(__func: Callable[[_T], _S], __arg: _T) -> Callable[[], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2], _S], __arg: _T) -> Callable[[_T2], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2], _S], __arg1: _T, __arg2: _T2) -> Callable[[], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3], _S], __arg: _T) -> Callable[[_T2, _T3], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3], _S], __arg1: _T, __arg2: _T2) -> Callable[[_T3], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3], _S], __arg1: _T, __arg2: _T2, __arg3: _T3) -> Callable[[], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4], _S], __arg: _T) -> Callable[[_T2, _T3, _T4], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4], _S], __arg1: _T, __arg2: _T2) -> Callable[[_T3, _T4], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4], _S], __arg1: _T, __arg2: _T2, __arg3: _T3) -> Callable[[_T4], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4], _S], __arg1: _T, __arg2: _T2, __arg3: _T3, __arg4: _T4) -> Callable[[], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4, _T5], _S], __arg: _T) -> Callable[[_T2, _T3, _T4, _T5], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4, _T5], _S], __arg1: _T, __arg2: _T2) -> Callable[[_T3, _T4, _T5], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4, _T5], _S], __arg1: _T, __arg2: _T2, __arg3: _T3) -> Callable[[_T4, _T5], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4, _T5], _S], __arg1: _T, __arg2: _T2, __arg3: _T3, __arg4: _T4) -> Callable[[_T5], _S]: ...
@overload
def partial(__func: Callable[[_T, _T2, _T3, _T4, _T5], _S], __arg1: _T, __arg2: _T2, __arg3: _T3, __arg4: _T4, __arg5: _T5) -> Callable[[], _S]: ...
@overload
def partial(__func: Callable[..., _S], *args, **kwargs) -> Callable[..., _S]: ...
def paths_prefix() -> str: ...
def print_stats(self) -> str: ...
