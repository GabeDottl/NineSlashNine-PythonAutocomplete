# (generated with --quick)

from typing import Any, Generator, List, Optional, Tuple, TypeVar

_TAutocompleteTrie = TypeVar('_TAutocompleteTrie', bound=AutocompleteTrie)
_TNode = TypeVar('_TNode', bound=Node)

class AutocompleteTrie:
    root: Node
    def __init__(self) -> None: ...
    def add(self, line) -> None: ...
    def get_best(self, prefix) -> Optional[str]: ...
    def get_frequency(self, value) -> int: ...
    def prune_infrequent_copy(self: _TAutocompleteTrie, min_count) -> _TAutocompleteTrie: ...

class Node:
    children: dict
    count: int
    highest_child_char: Any
    highest_child_count: Any
    remainder: Any
    def __init__(self) -> None: ...
    def add_child(self, char, child) -> None: ...
    def assert_valid(self) -> Any: ...
    def get_max_count_at_or_beneath(self) -> Any: ...
    def get_max_path(self) -> str: ...
    def get_path_to(self, s) -> Optional[List[Tuple[Any, Any]]]: ...
    def handle_child_increase(self, char) -> None: ...
    def increment_count(self) -> None: ...
    def prune_infrequent_copy(self: _TNode, min_count) -> _TNode: ...
    def to_str(self, indent = ...) -> str: ...
    def traverse(self, array = ..., nodes = ..., path = ...) -> Generator[Tuple[Any, Any], Any, None]: ...
